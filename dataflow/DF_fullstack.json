{
	"name": "DF_fullstack",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "fullstackdata",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "fullstackdata",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "weborderdata",
						"type": "DatasetReference"
					},
					"name": "source3"
				},
				{
					"dataset": {
						"referenceName": "fullstackevent",
						"type": "DatasetReference"
					},
					"name": "source4"
				},
				{
					"dataset": {
						"referenceName": "orderdb",
						"type": "DatasetReference"
					},
					"name": "source5"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "fullstackevent",
						"type": "DatasetReference"
					},
					"name": "fullstackoutput"
				},
				{
					"dataset": {
						"referenceName": "eventdata",
						"type": "DatasetReference"
					},
					"name": "webevent"
				},
				{
					"dataset": {
						"referenceName": "orderdb",
						"type": "DatasetReference"
					},
					"name": "ordersql"
				},
				{
					"dataset": {
						"referenceName": "webdetails",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "updatetype"
				},
				{
					"name": "updatenooftickets"
				},
				{
					"name": "updateprice"
				},
				{
					"name": "addeddurationcolumn"
				},
				{
					"name": "sortbyid"
				},
				{
					"name": "select1"
				},
				{
					"name": "join1"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as short,",
				"          title as string,",
				"          type as string,",
				"          address as string,",
				"          date as string,",
				"          entryTime as string,",
				"          exitTime as string,",
				"          nooftickets as short,",
				"          price as short,",
				"          description as string,",
				"          organizedBy as string,",
				"          location as string,",
				"          imageUrl as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          id as short,",
				"          title as string,",
				"          type as string,",
				"          address as string,",
				"          date as date,",
				"          entryTime as string,",
				"          exitTime as string,",
				"          nooftickets as short,",
				"          price as short,",
				"          description as string,",
				"          organizedBy as string,",
				"          location as string,",
				"          imageUrl as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source(output(",
				"          id as string,",
				"          EventId as short,",
				"          UserId as string,",
				"          numberoftickets as short,",
				"          totalprice as integer,",
				"          eventTitle as string,",
				"          username as string,",
				"          eventImage as string,",
				"          date as string,",
				"          venue as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source3",
				"source(output(",
				"          id as short,",
				"          title as string,",
				"          type as string,",
				"          address as string,",
				"          date as string,",
				"          nooftickets as integer,",
				"          price as integer,",
				"          description as string,",
				"          organizedBy as string,",
				"          location as string,",
				"          imageUrl as string,",
				"          duration as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source4",
				"source(output(",
				"          id as string,",
				"          EventId as short,",
				"          UserId as string,",
				"          numberoftickets as short,",
				"          totalprice as integer,",
				"          eventTitle as string,",
				"          username as string,",
				"          eventImage as string,",
				"          date as string,",
				"          venue as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source5",
				"source1 derive(type = iif(isNull(type), 'concert', type)) ~> updatetype",
				"updatetype derive(nooftickets = coalesce(nooftickets, 500)) ~> updatenooftickets",
				"updatenooftickets derive(price = coalesce(price, 1500)) ~> updateprice",
				"updateprice derive(duration = concat(toString(entryTime), ' - ', toString(exitTime))) ~> addeddurationcolumn",
				"addeddurationcolumn sort(asc(id, true)) ~> sortbyid",
				"sortbyid select(mapColumn(",
				"          id,",
				"          title,",
				"          type,",
				"          address,",
				"          date,",
				"          nooftickets,",
				"          price,",
				"          description,",
				"          organizedBy,",
				"          location,",
				"          imageUrl,",
				"          duration",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"source4, source5 join(source4@id == EventId,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          id = source5@id,",
				"          event_id = source4@id,",
				"          event_name = title,",
				"          event_type = type,",
				"          event_address = address,",
				"          total_tickets = nooftickets,",
				"          price_per_ticket = price,",
				"          event_description = description,",
				"          organizedBy,",
				"          event_location = location,",
				"          imageUrl,",
				"          duration,",
				"          UserId,",
				"          tickets_buyed = numberoftickets,",
				"          total_price = totalprice,",
				"          username,",
				"          eventImage,",
				"          event_date = source5@date,",
				"          event_venue = venue",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> fullstackoutput",
				"source2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> webevent",
				"source3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as string,",
				"          EventId as integer,",
				"          UserId as string,",
				"          numberoftickets as integer,",
				"          totalprice as integer,",
				"          eventTitle as string,",
				"          username as string,",
				"          eventImage as string,",
				"          date as string,",
				"          venue as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> ordersql",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}